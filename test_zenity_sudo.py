#!/usr/bin/env python3
"""
Teste independente para a funcionalidade de prompt sudo com zenity.
Este script testa apenas a parte de autentica√ß√£o sudo sem executar o jogo.
"""

import shutil
import subprocess
import sys

def test_sudo_prompt():
    """Testa o prompt sudo com zenity, similar ao usado no Linux-Coop."""
    print("=== Teste de Prompt Sudo com Zenity ===\n")
    
    # Verifica se zenity est√° dispon√≠vel
    zenity_available = shutil.which('zenity') is not None
    print(f"Zenity dispon√≠vel: {'Sim' if zenity_available else 'N√£o'}")
    
    # Primeiro verifica se j√° tem privil√©gios sudo v√°lidos
    try:
        subprocess.run(['sudo', '-n', 'true'], check=True, capture_output=True)
        print("‚úì Sudo j√° est√° v√°lido, n√£o precisa solicitar senha.")
        return True
    except subprocess.CalledProcessError:
        print("‚ö† Sudo n√£o est√° v√°lido, precisando solicitar senha...")
    
    # Tenta usar zenity para interface gr√°fica
    if zenity_available:
        try:
            print("\nüñ•Ô∏è Testando interface gr√°fica com zenity...")
            result = subprocess.run([
                'zenity', '--password', 
                '--title=Teste Linux-Coop', 
                '--text=Digite sua senha sudo para testar:'
            ], capture_output=True, text=True)
            
            if result.returncode == 0:
                password = result.stdout.strip()
                print("‚úì Senha recebida via zenity")
                
                # Testa a senha com sudo
                print("üîê Validando senha...")
                sudo_process = subprocess.Popen(
                    ['sudo', '-S', 'true'], 
                    stdin=subprocess.PIPE, 
                    stdout=subprocess.PIPE, 
                    stderr=subprocess.PIPE,
                    text=True
                )
                stdout, stderr = sudo_process.communicate(input=password + '\n')
                
                if sudo_process.returncode == 0:
                    print("‚úÖ Senha v√°lida! Teste bem-sucedido.")
                    return True
                else:
                    print("‚ùå Senha inv√°lida!")
                    return False
            else:
                print("‚ùå Di√°logo cancelado pelo usu√°rio")
                return False
                
        except Exception as e:
            print(f"‚ùå Erro com zenity: {e}")
            print("üìã Tentando fallback para terminal...")
    
    # Fallback para prompt de terminal
    try:
        print("\nüíª Usando prompt de terminal...")
        subprocess.run(['sudo', '-v'], check=True)
        print("‚úÖ Senha validada via terminal!")
        return True
    except subprocess.CalledProcessError:
        print("‚ùå Falha na valida√ß√£o sudo via terminal")
        return False
    except FileNotFoundError:
        print("‚ùå Comando 'sudo' n√£o encontrado!")
        return False

def main():
    """Fun√ß√£o principal do teste."""
    print("Este script testa a funcionalidade de prompt sudo do Linux-Coop.\n")
    
    success = test_sudo_prompt()
    
    print(f"\n{'='*50}")
    if success:
        print("üéâ TESTE PASSOU! A funcionalidade sudo est√° funcionando.")
    else:
        print("üí• TESTE FALHOU! Verifique os erros acima.")
    
    return 0 if success else 1

if __name__ == "__main__":
    sys.exit(main())